name: CMake on multiple platforms

on:
  push:
    branches: 
      - "main" 
      - "Build-release-w/-whisper-using-vulkan"
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 4 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      # 4. <macOS, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: ['ubuntu-22.04', windows-latest, macos-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: 'ubuntu-22.04'
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: 'ubuntu-22.04'
            c_compiler: gcc
          - os: 'ubuntu-22.04'
            c_compiler: cl
          - os: macos-latest
            c_compiler: gcc
          - os: macos-latest
            c_compiler: cl

    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Install Dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-22.04'
        shell: bash
        run: |
          # Install basic dependencies
          sudo apt-get update
          sudo apt-get install -y libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev libxext-dev libwayland-dev \
                                  libxkbcommon-dev libgl1-mesa-dev
          
          # Download and install pre-built FFmpeg binaries
          wget https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-linux64-gpl-shared.tar.xz
          tar -xf ffmpeg-master-latest-linux64-gpl-shared.tar.xz
          sudo cp -r ffmpeg-master-latest-linux64-gpl-shared/include/* /usr/include/
          sudo cp -r ffmpeg-master-latest-linux64-gpl-shared/lib/* /usr/lib/
          sudo cp ffmpeg-master-latest-linux64-gpl-shared/bin/* /usr/bin/
          
          # Update the dynamic linker cache
          sudo ldconfig
          
          # Verify FFmpeg installation
          echo "Installed FFmpeg version:"
          ffmpeg -version

      - name: Install Dependencies (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-win64-gpl-shared.zip" -OutFile "ffmpeg.zip"
          Expand-Archive -Path "ffmpeg.zip" -DestinationPath "C:\ffmpeg"
          $ffmpegFolder = Get-ChildItem -Path "C:\ffmpeg" -Directory | Select-Object -First 1
          "C:\ffmpeg\$($ffmpegFolder.Name)" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          "C:\ffmpeg\$($ffmpegFolder.Name)\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          
          # Verify FFmpeg installation
          Write-Host "Installed FFmpeg version:"
          & "C:\ffmpeg\$($ffmpegFolder.Name)\bin\ffmpeg.exe" -version

      - name: Install Dependencies (MacOS)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          brew install ffmpeg
          
          # Verify FFmpeg installation
          echo "Installed FFmpeg version:"
          ffmpeg -version

      - name: Install Vulkan SDK
        if: matrix.os == 'windows-latest' || matrix.os == 'ubuntu-22.04'
        uses: humbletim/install-vulkan-sdk@main
        with:
          version: 1.3.250.1
          cache: true

      - name: Set environment variables for Vulkan SDK
        run: |
          if [ $RUNNER_OS == 'Linux' ]; then
            echo "VULKAN_SDK=/path/to/vulkan-sdk" >> $GITHUB_ENV
          elif [ $RUNNER_OS == 'Windows' ]; then
            echo "VULKAN_SDK=C:\VulkanSDK\1.3.250.1" >> $GITHUB_ENV

      - name: Check Vulkan Extension Support for Ubuntu
        if: matrix.os == 'ubuntu-22.04'
        run: |
          # Check if GL_KHR_cooperative_matrix is supported
          vulkaninfo | grep "GL_KHR_cooperative_matrix" || true
          if ! vulkaninfo | grep -q "GL_KHR_cooperative_matrix"; then
            echo "GL_KHR_cooperative_matrix not supported, disabling in build."
            echo "COOPMAT=0" >> $GITHUB_ENV
          else
            echo "GL_KHR_cooperative_matrix supported."
          fi

      - name: Check Vulkan Extension Support for Windows
        if: matrix.os == 'windows-latest'
        run: |
          # Check if GL_KHR_cooperative_matrix is supported
          vulkaninfo | findstr "GL_KHR_cooperative_matrix" || true
          if ! vulkaninfo | findstr "GL_KHR_cooperative_matrix"; then
            echo "GL_KHR_cooperative_matrix not supported, disabling in build."
            echo "COOPMAT=0" >> $GITHUB_ENV
          else
            echo "GL_KHR_cooperative_matrix supported."
          fi

      - name: Download Vulkan SDK
        if: matrix.os == 'macos-latest'
        run: |
          VULKAN_SDK_VERSION="1.3.250.1"
          SDK_URL="https://vulkan.lunarg.com/sdkhome#mac"
          curl -LO ${SDK_URL}/mac/vulkan-sdk-${VULKAN_SDK_VERSION}-mac.dmg
          hdiutil attach vulkan-sdk-${VULKAN_SDK_VERSION}-mac.dmg
          sudo cp -R /Volumes/VulkanSDK/${VULKAN_SDK_VERSION}/mac/VulkanSDK /usr/local/vulkan
          sudo ln -s /usr/local/vulkan/bin/* /usr/local/bin/
        env:
          VULKAN_SDK: /usr/local/vulkan
          VULKAN_SDK_VERSION: "1.3.250.1"

      - name: Set Vulkan Environment Variables (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          echo "VULKAN_SDK=$VULKAN_SDK" >> $GITHUB_ENV
          echo "PATH=$VULKAN_SDK/bin:$PATH" >> $GITHUB_ENV
          echo "DYLD_LIBRARY_PATH=$VULKAN_SDK/lib:$DYLD_LIBRARY_PATH" >> $GITHUB_ENV
          echo "VK_ICD_FILENAMES=$VULKAN_SDK/etc/vulkan/icd.d/MoltenVK_icd.json" >> $GITHUB_ENV
          echo "VK_LAYER_PATH=$VULKAN_SDK/etc/vulkan/layer.d" >> $GITHUB_ENV

      - name: Check Vulkan SDK Version (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $glslcPath = Join-Path -Path $env:VULKAN_SDK -ChildPath "Bin\glslc.exe"
          & $glslcPath --version
        shell: pwsh

      - name: Check Vulkan SDK Version (macOS/Linux)
        if: matrix.os == 'macos-latest' || matrix.os == 'ubuntu-22.04'
        run: |
          $VULKAN_SDK/bin/glslc --version
        shell: bash
      # Check if GL_KHR_cooperative_matrix is supported
      - name: Check for GL_KHR_cooperative_matrix Extension
        id: check_extension
        if: matrix.os == 'macos-latest' 
        run: |
          EXTENSIONS=$(vulkaninfo | grep "GL_KHR_cooperative_matrix" || true)
          echo "Extensions: $EXTENSIONS"
          if [[ -z "$EXTENSIONS" ]]; then
            echo "GL_KHR_cooperative_matrix is not supported."
            echo "cooperative_matrix_supported=false" >> $GITHUB_ENV
          else
            echo "GL_KHR_cooperative_matrix is supported."
            echo "cooperative_matrix_supported=true" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }}
          -DWHISPER_USE_VULKAN=${{ (matrix.os == 'windows-latest' || matrix.os == 'macos-latest' || matrix.os == 'ubuntu-22.04') && 'ON' || 'OFF' }}
          -DCOOPMAT=${{ env.COOPMAT }}

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest --build-config ${{ matrix.build_type }}

      - name: Copy Shared Libraries
        shell: pwsh
        run: |
          $buildOutputDir = "${{ steps.strings.outputs.build-output-dir }}/bin"

          if ($env:RUNNER_OS -eq "Linux") {
            Copy-Item -Path "$env:VULKAN_SDK/lib/libvulkan*" -Destination $buildOutputDir -Force

            Copy-Item -Path "/usr/lib/x86_64-linux-gnu/libstdc++.so.6" -Destination $buildOutputDir -Force
            Copy-Item -Path "/lib/x86_64-linux-gnu/libgcc_s.so.1" -Destination $buildOutputDir -Force

            Copy-Item -Path "/usr/lib/libavcodec*.so*" -Destination $buildOutputDir -Force
            Copy-Item -Path "/usr/lib/libavformat*.so*" -Destination $buildOutputDir -Force
            Copy-Item -Path "/usr/lib/libswscale*.so*" -Destination $buildOutputDir -Force
            Copy-Item -Path "/usr/lib/libavutil*.so*" -Destination $buildOutputDir -Force
            Copy-Item -Path "/usr/lib/libswresample*.so*" -Destination $buildOutputDir -Force
          }
          elseif ($env:RUNNER_OS -eq "macOS") {
            Copy-Item -Path "$env:VULKAN_SDK/lib/libMoltenVK.dylib" -Destination $buildOutputDir -Force
            Copy-Item -Path "$env:VULKAN_SDK/lib/libvulkan.*" -Destination $buildOutputDir -Force

            $ffmpegPrefix = & brew --prefix ffmpeg
            $libs = @("libavcodec", "libavformat", "libswscale", "libavutil")
            foreach ($lib in $libs) {
              Copy-Item -Path "$ffmpegPrefix/lib/$lib.dylib" -Destination $buildOutputDir -Force
            }
          }
          elseif ($env:RUNNER_OS -eq "Windows") {
            $ffmpegDir = (Get-Command ffmpeg.exe).Source | Split-Path -Parent
            Copy-Item -Path "$ffmpegDir/*.dll" -Destination $buildOutputDir -Force
          }

      - name: Zip Artifacts
        shell: pwsh
        run: |
          $buildDir = "${{ steps.strings.outputs.build-output-dir }}/bin"
          $zipName = "${{ matrix.os }}-${{ matrix.c_compiler }}-release.zip"

          Set-Location $buildDir
          if ($IsWindows) {
              # Use 7-zip on Windows
              7z a -tzip $zipName ./*
          } else {
              # Use native zip on Linux/macOS
              zip -r $zipName ./*
          }

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-${{ matrix.c_compiler }}-binaries
          path: |
            ${{ steps.strings.outputs.build-output-dir }}/bin/*.zip
          retention-days: 5

  release:
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Get version from CMakeLists.txt
        id: get_version
        run: |
          VERSION=$(grep -oP 'project\([^)]*VERSION\s+\K[0-9.]+' CMakeLists.txt || echo "0.1.0")
          COMMIT_SHA="${{ github.sha }}"
          SHORT_SHA="${COMMIT_SHA:0:7}"
          echo "version=$VERSION-$SHORT_SHA" >> $GITHUB_OUTPUT
          echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List downloaded artifacts
        run: find artifacts -type f | sort

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2.2.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: Release ${{ steps.get_version.outputs.version }} (${{ steps.get_version.outputs.date }})
          tag_name: v${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            artifacts/**/*.zip
            artifacts/**/*.tar.gz