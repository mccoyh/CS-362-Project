# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 4 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      # 4. <macOS, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: gcc
          - os: macos-latest
            c_compiler: cl

    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Install Dependencies
        run: |
          if ("${{ matrix.os }}" -eq "ubuntu-latest")
          {
            sudo apt-get update
            sudo apt-get install -y libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev libxext-dev libwayland-dev `
                                    libxkbcommon-dev libgl1-mesa-dev ffmpeg libavcodec-dev libavformat-dev `
                                    libswscale-dev libavutil-dev
          }
          elseif ("${{ matrix.os }}" -eq "windows-latest")
          {
            Invoke-WebRequest -Uri "https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-win64-gpl-shared.zip" -OutFile "ffmpeg.zip"
            Expand-Archive -Path "ffmpeg.zip" -DestinationPath "C:\ffmpeg"
            $ffmpegFolder = Get-ChildItem -Path "C:\ffmpeg" -Directory | Select-Object -First 1
            "C:\ffmpeg\$($ffmpegFolder.Name)" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
            "C:\ffmpeg\$($ffmpegFolder.Name)\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          
            & "C:\ffmpeg\$($ffmpegFolder.Name)\bin\ffmpeg.exe" -version
          }
          elseif ("${{ matrix.os }}" -eq "macos-latest")
          {
            brew install ffmpeg
          }
        shell: pwsh

      - name: Install Vulkan SDK
        uses: humbletim/install-vulkan-sdk@main
        with:
          version: 1.3.250.1
          cache: true

      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }}

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest --build-config ${{ matrix.build_type }}

      - name: Package Artifacts
        shell: pwsh
        run: |
          # Create artifacts directory
          New-Item -Path "${{ github.workspace }}/artifacts" -ItemType Directory -Force
          
          # Function to copy files matching a pattern
          function Copy-MatchingFiles {
            param (
              [string]$Pattern,
              [string]$Destination
            )
          
            if (-not [string]::IsNullOrWhiteSpace($Pattern)) {
              Get-ChildItem -Path "${{ steps.strings.outputs.build-output-dir }}" -Recurse -Include $Pattern | 
              ForEach-Object {
                Copy-Item $_.FullName -Destination $Destination
              }
            }
          }
          
          # Executables
          if ("${{ matrix.os }}" -eq "windows-latest") {
            # For Windows, look for .exe files
            Copy-MatchingFiles -Pattern "*.exe" -Destination "${{ github.workspace }}/artifacts"
          }
          elseif ("${{ matrix.os }}" -eq "macos-latest") {
            # For macOS, use Get-ChildItem with ExecutableOnly filter
            Get-ChildItem -Path "${{ steps.strings.outputs.build-output-dir }}" -Recurse -File | 
            Where-Object { $_.Attributes -band [System.IO.FileAttributes]::Normal } |
            ForEach-Object {
              Copy-Item $_.FullName -Destination "${{ github.workspace }}/artifacts"
            }
          }
          else {
            # For Linux, similar to macOS but with executable bit check
            Get-ChildItem -Path "${{ steps.strings.outputs.build-output-dir }}" -Recurse -File | 
            Where-Object { 
              $fullPath = $_.FullName
              (Get-Acl $fullPath).Access | 
              Where-Object { $_.FileSystemRights -band [System.Security.AccessControl.FileSystemRights]::ExecuteFile }
            } |
            ForEach-Object {
              Copy-Item $_.FullName -Destination "${{ github.workspace }}/artifacts"
            }
          }
          
          # Shared Libraries
          Copy-MatchingFiles -Pattern "${{ matrix.shared_lib_pattern }}" -Destination "${{ github.workspace }}/artifacts"
          
          # List Artifacts to Verify
          Write-Host "Artifacts found:"
          Get-ChildItem "${{ github.workspace }}/artifacts" | Format-Table Name, Length

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-${{ matrix.c_compiler }}-${{ matrix.build_type }}
          path: ${{ github.workspace }}/artifacts/*
          retention-days: 7